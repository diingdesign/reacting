{"version":3,"sources":["Reveal.js","serviceWorker.js","index.js"],"names":["interpolate","x","xMin","xMax","yMin","yMax","clipMin","Math","min","max","calcHeaderOffset","scrollY","SCROLL_TRAVEL_DISTANCE","maskShallHide","calcLogoScale","calcLogoOpacity","Footer","className","href","Reveal","middlePartRef","useRef","useState","logoHeight","setLogoHeight","setScrollY","useEffect","handleResize","current","offsetHeight","handleScroll","window","addEventListener","style","transform","class","src","width","height","frameBorder","allowtransparency","allowfullscreen","overflow","opacity","ref","background","target","rel","role","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qPAQA,SAASA,EAAYC,EAAGC,EAAMC,EAAMC,EAAMC,GAAuB,IAAjBC,IAAgB,yDAC9D,OAAIA,EACKC,KAAKC,IAAID,KAAKE,KAAQR,EAAIC,IAASG,EAAOD,IAASD,EAAOD,GAAUE,EAAMA,GAAOC,GAEnFE,KAAKC,KAAOP,EAAIC,IAASG,EAAOD,IAASD,EAAOD,GAAUE,EAAMC,GAGzE,SAASK,EAAiBC,GACxB,OAAOJ,KAAKC,IAAIG,EAASC,KAG3B,SAASC,EAAcF,GACrB,OAAOA,EAdsB,IAiB/B,SAASG,EAAcH,GACrB,OAAOX,EAAYW,EAAS,EAlBC,IAkB0B,EAAG,IAG5D,SAASI,EAAgBJ,GACvB,OAAO,EAAIX,EAAYW,EAASC,IAtBH,IAsByD,EAAG,GAG3F,SAASI,IACP,OACE,yBAAKC,UAAU,oDACb,yBAAKA,UAAU,YACf,yBAAKA,UAAU,oCAAmC,uBAAGC,KAAK,IAAID,UAAU,aAAtB,SAClD,yBAAKA,UAAU,eAAf,yBA+DSE,MA1Df,WACE,IAAMC,EAAgBC,iBAAO,MADb,EAEoBC,mBAAS,KAF7B,mBAETC,EAFS,KAEGC,EAFH,OAGcF,mBAAS,GAHvB,mBAGTX,EAHS,KAGAc,EAHA,KAoBhB,OAfAC,qBAAU,WACR,SAASC,IACPH,EAAcJ,EAAcQ,QAAQC,cACpCC,IAGF,SAASA,IACPL,EAAWM,OAAOpB,SAGpBgB,IACAI,OAAOC,iBAAiB,SAAUL,GAClCI,OAAOC,iBAAiB,SAAUF,MAIlC,yBAAKb,UAAU,uBAAuBgB,MAAO,CAACC,UAAU,eAAD,OAAiBxB,EAAiBC,GAAlC,SACrD,yBAAKM,UAAU,OACb,yBAAKA,UAAU,4DACb,yBAAKA,UAAU,qBACb,yBAAKkB,MAAM,kCAAiC,4BAAQC,IAAI,yDAAyDC,MAAM,OAAOC,OAAO,OAAOC,YAAY,IAAIC,kBAAkB,OAAOC,gBAAgB,OAAOR,MAAO,CAACS,SAAS,cAE/N,yBAAKzB,UAAS,yDAAoDJ,EAAcF,GAAW,SAAW,UAAYsB,MAAO,CAACC,UAAU,SAAD,OAAWpB,EAAcH,GAAzB,KAAsCgC,QAAS5B,EAAgBJ,KAChM,yBAAKM,UAAU,wBACf,yBAAKA,UAAU,iDACb,yBAAKA,UAAU,yBAAf,QACA,yBAAKA,UAAU,cAAc2B,IAAKxB,EAAea,MAAO,CAACI,MAAOd,IAAhE,QACA,yBAAKN,UAAU,0BAAf,SAEF,yBAAKA,UAAU,8BAIrB,yBAAKA,UAAU,OACb,yBAAKA,UAAU,gGACb,yBAAKA,UAAU,oBAAoBgB,MAAO,CAACY,WAAY,UACrD,8CACA,wBAAI5B,UAAU,6CACZ,4BAAI,yBAAKA,UAAU,SAAa,yBAAKA,UAAU,2BAAf,0HAChC,4BAAI,yBAAKA,UAAU,SAAa,yBAAKA,UAAU,2BAAf,qGAChC,4BAAI,yBAAKA,UAAU,SAAa,yBAAKA,UAAU,2BAAf,aAAmD,uBAAGC,KAAK,KAAR,SAAnD,kHAChC,4BAAI,2HAEN,uBAAGA,KAAK,4BAA4BD,UAAU,gCAAgC6B,OAAO,SAASC,IAAI,sBAAsBC,KAAK,UAA7H,kBAEF,yBAAK/B,UAAU,uBAAf,UAGJ,kBAACD,EAAD,QClFciC,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.56e3d2bd.chunk.js","sourcesContent":["import React from 'react';\nimport './Reveal.css';\nimport { useRef } from 'react';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\n\nconst SCROLL_TRAVEL_DISTANCE = 300;\n\nfunction interpolate(x, xMin, xMax, yMin, yMax, clipMin = true) {\n  if (clipMin) {\n    return Math.min(Math.max( ( (x - xMin) * (yMax - yMin) / (xMax - xMin) ) + yMin, yMin), yMax);\n  }\n  return Math.min(( (x - xMin) * (yMax - yMin) / (xMax - xMin) ) + yMin, yMax);\n}\n\nfunction calcHeaderOffset(scrollY) {\n  return Math.min(scrollY, SCROLL_TRAVEL_DISTANCE + 100);\n}\n\nfunction maskShallHide(scrollY) {\n  return scrollY > SCROLL_TRAVEL_DISTANCE\n}\n\nfunction calcLogoScale(scrollY) {\n  return interpolate(scrollY, 0, SCROLL_TRAVEL_DISTANCE, 1, 10);\n}\n\nfunction calcLogoOpacity(scrollY) {\n  return 1 - interpolate(scrollY, SCROLL_TRAVEL_DISTANCE - 150, SCROLL_TRAVEL_DISTANCE, 0, 1);\n}\n\nfunction Footer() {\n  return (\n    <div className=\"row footer d-flex flex-column align-items-center\">\n      <div className=\"divider\"></div>\n      <div className=\"social mt-3 mb-3 d-flex flex-row\"><a href=\"#\" className=\"instagram\">&nbsp;</a></div>\n      <div className=\"credit mb-4\">Â© Diing Inc. 2020</div>\n    </div>\n  );\n}\n\nfunction Reveal() {\n  const middlePartRef = useRef(null);\n  const [logoHeight, setLogoHeight] = useState(200);\n  const [scrollY, setScrollY] = useState(0);\n\n  useEffect(() => {\n    function handleResize() {\n      setLogoHeight(middlePartRef.current.offsetHeight);\n      handleScroll();\n    }\n\n    function handleScroll() {\n      setScrollY(window.scrollY);\n    }\n\n    handleResize();\n    window.addEventListener(\"resize\", handleResize);\n    window.addEventListener(\"scroll\", handleScroll);\n  });\n\n  return (\n    <div className=\"main container-fluid\" style={{transform: `translate(0,${calcHeaderOffset(scrollY)}px)`}}>\n      <div className=\"row\">\n        <div className=\"showcase overflow-hidden w-100 bg-dark position-relative\">\n          <div className=\"chair h-100 w-100\">\n            <div class=\"realityfab-wrapper h-100 w-100\"><iframe src=\"https://staging.realityfab.com/entities/nXSS7pbc/embed\" width=\"100%\" height=\"100%\" frameBorder=\"0\" allowtransparency=\"true\" allowfullscreen=\"true\" style={{overflow:\"hidden\"}}></iframe></div>\n          </div>\n          <div className={`mask w-100 h-100 position-absolute flex-column ${maskShallHide(scrollY) ? \"d-none\" : \"d-flex\"}`} style={{transform: `scale(${calcLogoScale(scrollY)})`, opacity: calcLogoOpacity(scrollY)}}>\n            <div className=\"top-part w-100 h-20\"></div>\n            <div className=\"center-part w-100 flex-grow-1 d-flex flex-row\">\n              <div className=\"left-part flex-grow-1\">&nbsp;</div>\n              <div className=\"middle-part\" ref={middlePartRef} style={{width: logoHeight}}>&nbsp;</div>\n              <div className=\"right-part flex-grow-1\">&nbsp;</div>\n            </div>\n            <div className=\"bottom-part w-100 h-20\"></div>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"container d-flex align-items-center justify-content-center flex-column flex-md-row mt-5 mb-4\">\n          <div className=\"event flex-grow-1\" style={{background: \"black\"}}>\n            <h1>Win Your Prize</h1>\n            <ul className=\"d-flex flex-column align-items-left rules\">\n              <li><div className=\"icon\"></div><div className=\"description flex-grow-1\">Open this page in an AR-enabled mobile device*. Press the AR button above and place the chair in your physical space.</div></li>\n              <li><div className=\"icon\"></div><div className=\"description flex-grow-1\">Explore the chair in AR mode and find the coupon code on it. Look carefully, it hides somewhere.</div></li>\n              <li><div className=\"icon\"></div><div className=\"description flex-grow-1\">Go to the <a href=\"#\">Store</a>, shop a chair you like, enter the coupon code during the checkout. Give yourself a cheer, you win the prize!</div></li>\n              <li><footnote>* Support iPhone and iPad with iOS 12+, and Google Chrome v83 in an Android device.</footnote></li>\n            </ul>\n            <a href=\"https://predatorxosim.com\" className=\"btn btn-primary btn-main mb-5\" target=\"_blank\" rel=\"noopener noreferrer\" role=\"button\">Find Out More</a>\n          </div>\n          <div className=\"qrcode ml-md-1 mb-4\">&nbsp;</div>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default Reveal;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Reveal from './Reveal';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Reveal />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}